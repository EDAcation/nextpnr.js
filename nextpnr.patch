--- nextpnr/CMakeLists.txt	2021-10-24 14:32:39.651506691 +0200
+++ nextpnr/CMakeLists.txt	2021-10-24 16:13:33.547647954 +0200
@@ -9,17 +9,22 @@
 include(CheckIPOSupported)
 check_ipo_supported(RESULT ipo_supported)

+set(Boost_PROGRAM_OPTIONS_LIBRARY_CUSTOM "${CMAKE_CURRENT_LIST_DIR}/../boost/bin.v2/wasm/libboost_program_options.a")
+set(Boost_FILESYSTEM_LIBRARY_CUSTOM "${CMAKE_CURRENT_LIST_DIR}/../boost/bin.v2/wasm/libboost_filesystem.a")
+set(Boost_SYSTEM_LIBRARY_CUSTOM "${CMAKE_CURRENT_LIST_DIR}/../boost/bin.v2/wasm/libboost_system.a")
+set(Boost_THREAD_LIBRARY_CUSTOM "${CMAKE_CURRENT_LIST_DIR}/../boost/bin.v2/wasm/libboost_thread.a")
+
 option(BUILD_GUI "Build GUI" OFF)
-option(BUILD_PYTHON "Build Python Integration" ON)
+option(BUILD_PYTHON "Build Python Integration" OFF)
 option(BUILD_TESTS "Build tests" OFF)
-option(BUILD_HEAP "Build HeAP analytic placer" ON)
+option(BUILD_HEAP "Build HeAP analytic placer" OFF)
 option(USE_OPENMP "Use OpenMP to accelerate analytic placer" OFF)
 option(COVERAGE "Add code coverage info" OFF)
 option(STATIC_BUILD "Create static build" OFF)
 option(EXTERNAL_CHIPDB "Create build with pre-built chipdb binaries" OFF)
 option(WERROR "pass -Werror to compiler (used for CI)" OFF)
 option(PROFILER "Link against libprofiler" OFF)
-option(USE_IPO "Compile nextpnr with IPO" ON)
+option(USE_IPO "Compile nextpnr with IPO" OFF)

 if (USE_IPO)
     if (ipo_supported)
@@ -158,12 +163,6 @@

 find_package(Sanitizers)

-# List of Boost libraries to include
-set(boost_libs filesystem program_options iostreams system)
-if (USE_THREADS)
-    list(APPEND boost_libs thread)
-endif()
-
 if (BUILD_GUI AND NOT BUILD_PYTHON)
     message(FATAL_ERROR "GUI requires Python to build")
 endif()
@@ -181,8 +180,6 @@
     add_definitions("-DNO_PYTHON")
 endif()

-find_package(Boost REQUIRED COMPONENTS ${boost_libs})
-
 if (BUILD_GUI)
     # Find the Qt5 libraries
     find_package(Qt5 COMPONENTS Core Widgets OpenGL REQUIRED)
@@ -317,6 +314,14 @@
             target_link_libraries(${target} PRIVATE ${lib_dep})
         endforeach()

+        target_link_libraries(${target} LINK_PUBLIC
+            ${Boost_PROGRAM_OPTIONS_LIBRARY_CUSTOM}
+            ${Boost_FILESYSTEM_LIBRARY_CUSTOM}
+            ${Boost_SYSTEM_LIBRARY_CUSTOM}
+            ${Boost_THREAD_LIBRARY_CUSTOM})
+
+        target_link_libraries(${target} LINK_PUBLIC -s TOTAL_MEMORY=240000000 -s INITIAL_MEMORY=240000000 -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_RUNTIME_METHODS='["callMain"]')
+
         # Include family-specific source files to all family targets and set defines appropriately
         target_include_directories(${target} PRIVATE ${family}/ ${CMAKE_CURRENT_BINARY_DIR}/generated/)
         target_compile_definitions(${target} PRIVATE NEXTPNR_NAMESPACE=nextpnr_${family} ARCH_${ufamily} ARCHNAME=${family})
